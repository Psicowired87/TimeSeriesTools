


###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################


########################### TO DEPRECATE
def code_from_thresholds_ind(ts, neuron, thresholds, reference, collapse=True,
                             collapse_to='initial'):
    '''Compute the discretized measure of the signal. It returns a 3-column
    array with the times, neuron and regime.

    Parameters
    ----------
    ts: array_like shape (N,)
        time-serie in an array representation.
    neuron: int
        index of the neuron we are representing.
    thresholds: int, float, list, array_like or object.
        Thresholds in order to discretize the signal.
        * If list or array_like, discretize ts using this points.
        * If object, discretize with its function transform.
    reference: int
        value of reference.
    units: str
        what is the units in which is measured the thresholds.
    individual: bool
        if we make a treatment neuron-by-neuron or we select the top (of the
        peak) globally, and then the absolut threshold value.

    Returns
    -------
    dis_ts: array_like shape (Nd,3)
        the discretized signal in a sparse representation.

    '''
    ## 1. Compute regimes.
    if type(thresholds) in [np.float64, float, int]:
        thresholds = [thresholds]
        coding = [0, 1]
        regimes = Utils.discretize_with_thresholds(ts, thresholds, coding)
    if type(thresholds) in [list, np.array, np.ndarray]:
        min_ind = np.argmin(abs(np.array(thresholds)-reference))
        coding = range(-min_ind, len(thresholds)-min_ind+1)
        regimes = Utils.discretize_with_thresholds(ts, thresholds, coding)
    else:
        regimes = thresholds.transform(ts)
        ##TODO: change regimes in order to respect reference

    values = np.unique(regimes)
    if values.shape[0] == 1:
        raise Exception("Only discretized in one value.")
    elif values.shape[0] == 2:
        values = values[1:]

    ## 2. Temporal collapsing of events
    if collapse:
        spikes = []
        for val in values:
            # Compute vector of changes in regime.
            APbool = (regimes == val).astype(int)
            # Obtaining ups and downs
            diffe = np.diff(APbool, axis=0)
            ups = np.where(diffe == 1)[0] + 1
            downs = np.where(diffe == -1)[0] + 1
            # Correcting the borders
            if diffe[np.where(diffe)[0][-1]] == 1:
                downs = np.hstack([downs, np.array([regimes.shape[0]])])
            if diffe[np.where(diffe)[0][0]] == -1:
                ups = np.hstack([np.array([0]), ups])
            # Ranges in which there are changes
            ranges = np.vstack([ups, downs]).T

            # Collapsing to
            if collapse_to == 'center':
                APindices = ranges.mean(axis=1).round().astype(int)
            elif collapse_to == 'initial':
                APindices = ranges.min(axis=1).round().astype(int)
            elif collapse_to == 'final':
                APindices = ranges.max(axis=1).round().astype(int)

            neuron_index = neuron * np.ones(APindices.shape).astype(int)
            regime_index = val * np.ones(APindices.shape).astype(int)
            neu_contrib = np.vstack([APindices, neuron_index, regime_index])
            spikes.append(neu_contrib)
        dis_ts = np.hstack(spikes).T
    else:
        APindices = np.arange(0, ts.shape[0])
        neuron_index = neuron * np.ones(ts.shape).astype(int)
        regime_index = regimes
        neu_contrib = np.vstack([APindices, neuron_index, regime_index])
        dis_ts = neu_contrib.T

    ## 3. Sort by times
    sort_indices = np.argsort(dis_ts[:, 0])
    dis_ts = dis_ts[sort_indices, :]

    return dis_ts


###############################################################################
############################# Relative detection ##############################
###############################################################################
# TODO: considering the threshold as a moving average quantity which varies
# with the TS.

###############################################################################


###############################################################################
############################# Auxiliar functions ##############################
###############################################################################
def compute_abs_thresholds(signals, refs, threshold, axisn=None, units='gap',
                           units_function=lambda x: x):
    '''Compute thresholds using the method specified in the inputs.

    Parameters
    ----------
    signals: array_like, shape(Ntimes, Nelements)
        the signals of the elements of the system or some part of it.
    refs: float, array_like
        the reference values to start comparing whith the actual value of the
        ts in order to determine if it is a peak.
    threshold: float
        float which represent the number of units of the threshold.
    aixn: int or None
        the axis over which the time extends in the ts. In the case we want to
        study as a homogenous stationary system we can use None.
    units: str, optional
        how to measure the threshold value.

    Returns
    -------
    threshold_value: array_like, float
        threshold which separates regimes.

    References
    ----------
    .. [1] Quian Quiroga et al. (2004) (Corrected threshold based in std)

    TODO
    ----
    More than one
    Accept refs as matrix in which there is a reference value for each time.
    Return threshold_value for each time.
    '''

    # Select the method specified and compute the thresholds.
    if units == 'gap':
        max_value = np.amax(signals, axis=axisn)
        threshold_value = refs + (max_value - refs) * threshold
    elif units == 'std':
        stdu = np.std(signals, axis=axisn)
        threshold_value = refs + threshold * stdu
    elif units == 'qqstd':
        qqstdu = np.median(signals/0.6745, axis=axisn)
        threshold_value = refs + threshold * qqstdu
    #TODO: changing
    elif units == 'manual':
        unit_m = units_function(signals)
        threshold_value = refs + threshold * unit_m

    return threshold_value


def code_from_thresholds_ind(ts, neuron, thresholds, reference, collapse=True,
                             collapse_to='initial'):
    '''Compute the discretized measure of the signal. It returns a 3-column
    array with the times, neuron and regime.

    Parameters
    ----------
    ts: array_like shape (N,)
        time-serie in an array representation.
    neuron: int
        index of the neuron we are representing.
    thresholds: int, float, list, array_like or object.
        Thresholds in order to discretize the signal.
        * If list or array_like, discretize ts using this points.
        * If object, discretize with its function transform.
    reference: int
        value of reference.
    units: str
        what is the units in which is measured the thresholds.
    individual: bool
        if we make a treatment neuron-by-neuron or we select the top (of the
        peak) globally, and then the absolut threshold value.

    Returns
    -------
    dis_ts: array_like shape (Nd,3)
        the discretized signal in a sparse representation.

    '''
    ## 1. Compute regimes.
    if type(thresholds) in [np.float64, float, int]:
        thresholds = [thresholds]
        coding = [0, 1]
        regimes = Utils.discretize_with_thresholds(ts, thresholds, coding)
    if type(thresholds) in [list, np.array, np.ndarray]:
        min_ind = np.argmin(abs(np.array(thresholds)-reference))
        coding = range(-min_ind, len(thresholds)-min_ind+1)
        regimes = Utils.discretize_with_thresholds(ts, thresholds, coding)
    else:
        regimes = thresholds.transform(ts)
        ##TODO: change regimes in order to respect reference

    values = np.unique(regimes)
    if values.shape[0] == 1:
        raise Exception("Only discretized in one value.")
    elif values.shape[0] == 2:
        values = values[1:]

    ## 2. Temporal collapsing of events
    if collapse:
        spikes = []
        for val in values:
            # Compute vector of changes in regime.
            APbool = (regimes == val).astype(int)
            # Obtaining ups and downs
            diffe = np.diff(APbool, axis=0)
            ups = np.where(diffe == 1)[0] + 1
            downs = np.where(diffe == -1)[0] + 1
            # Correcting the borders
            if diffe[np.where(diffe)[0][-1]] == 1:
                downs = np.hstack([downs, np.array([regimes.shape[0]])])
            if diffe[np.where(diffe)[0][0]] == -1:
                ups = np.hstack([np.array([0]), ups])
            # Ranges in which there are changes
            ranges = np.vstack([ups, downs]).T

            # Collapsing to
            if collapse_to == 'center':
                APindices = ranges.mean(axis=1).round().astype(int)
            elif collapse_to == 'initial':
                APindices = ranges.min(axis=1).round().astype(int)
            elif collapse_to == 'final':
                APindices = ranges.max(axis=1).round().astype(int)

            neuron_index = neuron * np.ones(APindices.shape).astype(int)
            regime_index = val * np.ones(APindices.shape).astype(int)
            neu_contrib = np.vstack([APindices, neuron_index, regime_index])
            spikes.append(neu_contrib)
        dis_ts = np.hstack(spikes).T
    else:
        APindices = np.arange(0, ts.shape[0])
        neuron_index = neuron * np.ones(ts.shape).astype(int)
        regime_index = regimes
        neu_contrib = np.vstack([APindices, neuron_index, regime_index])
        dis_ts = neu_contrib.T

    ## 3. Sort by times
    sort_indices = np.argsort(dis_ts[:, 0])
    dis_ts = dis_ts[sort_indices, :]

    return dis_ts


def compute_ref_values(signals, axisn=None,
                       transf_ref=lambda x, y: x):
    '''Computes the reference value according to the reference kind.
    It is computed for each neuron or globally according to the value of axisn.

    Parameters
    ----------
    signals: array_like, shape (N,M)
        describe the measure of the signals and the time of the measures of the
        M neurons along N measurements.
    axisn: int or None
        axis along there is the time.
        * If None, compute the statistic globally.
    transf_ref: function
        transform the time-series to another time-series that represents the
        normal and representative behaviour of the system in each moment.
        This function has two possible inputs: the signal and the axis along
        which is represented time (axisn).

    Returns
    -------
    ref_value: array_like, shape (N,M)
        reference value to start comparing whith the actual value of the ts in
        order to determine if it is a peak. It represents the normal state or
        behaviour of the system for systems with two states (active or idle).

    '''

    # Compute the reference value
    transf_ref(signals, axisn)

    if reference == 'min':
        ref_value = np.amin(signals, axis=axisn)
    elif reference == 'mean':
        ref_value = np.mean(signals, axis=axisn)
    elif reference == 'mode':
        # TODO
        #reference_value = statistics.mode()
        pass
    # Personal method applying a given transformation
    elif reference == 'personal':
        ref_value = transformation(signals, axisn)

    return ref_value


'''

def threshold_regime_detection(activation, threshold, method, **kwargs):
    pass


def relative_regime_detection(activation, threshold, collapse_to='initial',
                              individual=True, transformation='ups_downs',
                              trans_units=lambda x: np.std(x),
                              transf_ref=lambda x: np.mean(x)):

    ## 1. Reformating of the inputs
    times = np.array(activation.index)
    neuronnames = list(activation.columns)
    signals = activation.as_matrix()

    ## 2. Compute reference values
    if individual:
        axisn = 0
    else:
        axisn = None

    # Input a units and reference functions
    # units and reference as a sons functions
    pass
'''


def global_regime_detection(activation, individual=True):
    """reference='min',
    units='gap',
    threshold
    collapse_to='initial',
    """
    '''Easy threshold-based method for regime detection.
    It is able to detect simple peaks which are remarkable visible.
    It uses the given threshold and selects the time of the peak in time using
    the reference.

    Parameters
    ----------
    activation: pandas.DataFrame
        describe the measure of the voltage and the time of the measures.
    threshold: float or list of floats, str
        which is marks the relative threshold respect to the reference.
        * If float, only one threshold which this value.
        * If list of floats, there are list of thresholds.
        * If str, method to apply unsupervised model to discretize the space.
    reference: str in ['mean','min','mode']
        method to obtain the reference value.
    units: str
        what is the units in which is measured the thresholds.
    individual: bool
        if we make a treatment neuron-by-neuron or we select the top (of the
        peak) globally, and then the absolut threshold value.

    Returns
    -------
    dis_ts: pandas.DataFrame
        Discretized time-series.

    References
    ----------
    .. [1] Pouzat et al., 2002 (Threshold based in multiple of std)
    .. [2] Quian Quiroga et al. (2004) (Corrected threshold based in std)
    .. [3] http://www.scholarpedia.org/article/Spike_sorting

    '''

    ## 1. Reformating of the inputs
    times = np.array(activation.index)
    neuronnames = list(activation.columns)
    signals = activation.as_matrix()

    ## 2. Transformation
    signals = transformations.temporal_discretization(signals, sparse=False,
                                                      method=transformation)
    signals = signals.reshape(signals.shape[0], signals.shape[1])

    ## 3. Compute reference values
    if individual:
        axisn = 0
    else:
        axisn = None

    refs = general_transformation(activation, **ref_transf_pars)
    units = general_transformation(activation, **units_transf_pars)
    thresholds = general_transformation(refs, units, **thr_transf_pars)

    ## 4. Compute thresholds (function)
    thresholds = compute_abs_thresholds(signals, refs, threshold, axisn, units)

    ## 5. Discretization by regime
    dis = []
    for neuron in range(signals.shape[1]):
        disi = code_from_thresholds_ind(signals[:, neuron], neuron,
                                        thresholds[neuron], refs[neuron],
                                        True, collapse_to)
        dis.append(disi)
    dis_ts = np.vstack(dis)

    ## 6. Sorting by time
    sort_indices = np.argsort(dis_ts[:, 0])
    dis_ts = dis_ts[sort_indices, :]

    ## 7. Filter the 0-indexes
    dis_ts = dis_ts[dis_ts[:, 0] != 0, :]

    ## 8. Storing in a df and replacing the correct times and neuronnames
    values = signals[dis_ts[:, 0].astype(int), dis_ts[:, 1].astype(int)]
    values = values.reshape(values.shape[0], 1)

    dis_ts = np.vstack([dis_ts.T, values.T]).T
    dis_ts = pd.DataFrame(dis_ts, columns=['times', 'neuron', 'regime',
                                           'value'])
    dis_ts['neuron'].replace(dict(zip(range(len(neuronnames)), neuronnames)))
    dis_ts['times'] = times[np.array(dis_ts['times']).astype(int)]
    return dis_ts
###############################################################################


def threshold_builder_f(signals, method, kwargs):
    """Function
    """

    if type(method).__name__ == 'function':
        f = method
        method = 'personal'

    if method == 'ref_based':
        X = ref_based_trhes_builder(signals, **kwargs)
    elif method == 'personal':
        X = f(signals, **kwargs)

    return X


def general_regime_detection(activation, method, *patterns, **kwargs):
    """General function which wraps all the possible functions which performs
    regime detection. It is really useful for the authomatic mode in which all
    the parameters are known at the beginning without any interaction with the
    data.

    Parameters
    ----------
    activation: pandas.DataFrame
        description of the dynamics of the system.
    method: str, optional
        method or methods selected to perform regime detection.
    patterns: pandas.DataFrame
        examples of patterns we want to detect in the dynamics given.

    Returns
    -------
    regimes: pandas.DataFrame
        sparse representation of the regimes detected.

    """

    # Check and format inputs
    possible = ['pattern_matching', 'threshold_based']
    if type(method) == str:
        method = method if method in possible else 'threshold_based'
    else:
        raise Exception("Not correct type of method parameter.")

    # Switcher
    if method == 'threshold_based':
        regimes = threshold_regime_detection(activation, **kwargs)
    elif method == 'pattern_matching':
        regimes = pattern_matching_detection(activation, patterns, **kwargs)

    return regimes
